package com.example.canvastester;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.PointF;
import android.support.v4.view.GestureDetectorCompat;
import android.util.AttributeSet;
import android.util.FloatMath;
import android.util.Log;
import android.view.Display;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;


public class DrawingPanel extends SurfaceView implements
		SurfaceHolder.Callback, GestureDetector.OnGestureListener,
		GestureDetector.OnDoubleTapListener, ScaleGestureDetector.OnScaleGestureListener {
	
	private static final String DEBUG_TAG = "Gestures";
	private GestureDetectorCompat mDetector;
	private ScaleGestureDetector mScaleDetector;

	private DrawingThread _thread;
	private float xlocation;
	private int x_dim, y_dim;
	private int mTextSize;
	private int mBoundary, mGridSize;
	private Paint mPaint, nPaint, textPaint, gridPaint, channelTextPaint;
	private boolean channel1Active, channel2Active;
	private float graphscaleX, graphscaleY, graphshiftx, graphshiftyChannel1, graphshiftyChannel2;
	public PointF[] channel1Points = new PointF[1200];
	public PointF[] channel2Points = new PointF[1200];
	private boolean displayUpdating = true;

	private float totalGraphShiftx = 0;
	private float totalGraphShifty = 0;
	private float totalGraphScale = 1;
	float scale = 1;

	// We can be in one of these 3 states
	static final int NONE = 0;
	static final int DRAG = 1;
	static final int ZOOM = 2;
	int mode = NONE;

	// Remember some things for zooming
	PointF start = new PointF();
	PointF mid = new PointF();
	float oldDist = 1f;

	
	public DrawingPanel(Context context, AttributeSet attr) {
		super(context, attr);
		getHolder().addCallback(this);
		_thread = new DrawingThread(getHolder(), this);
		xlocation = 0;
		mTextSize = 15;
		mBoundary = 10;
		mGridSize = 50;
		graphscaleX = 1;
		graphscaleY = 1;
		graphshiftx = 0;
		graphshiftyChannel1 = 100;
		graphshiftyChannel2 = 500;

		for (int i = 0; i < channel1Points.length; i++) {
			channel1Points[i] = new PointF();
			channel2Points[i] = new PointF();
		}

		mPaint = new Paint();
		mPaint.setDither(true);
		mPaint.setColor(0xFF0000FF);
		mPaint.setStyle(Paint.Style.STROKE);
		mPaint.setStrokeJoin(Paint.Join.ROUND);
		mPaint.setStrokeCap(Paint.Cap.ROUND);
		mPaint.setStrokeWidth(10);

		nPaint = new Paint();
		nPaint.setDither(true);
		nPaint.setColor(0xFFFF0000);
		nPaint.setStyle(Paint.Style.STROKE);
		nPaint.setStrokeJoin(Paint.Join.ROUND);
		nPaint.setStrokeCap(Paint.Cap.ROUND);
		nPaint.setStrokeWidth(10);

		gridPaint = new Paint();
		gridPaint.setDither(true);
		gridPaint.setColor(0x7FFFFFFF);
		gridPaint.setStyle(Paint.Style.STROKE);
		gridPaint.setStrokeJoin(Paint.Join.ROUND);
		gridPaint.setStrokeCap(Paint.Cap.ROUND);
		gridPaint.setStrokeWidth(1);

		textPaint = new Paint();
		textPaint.setDither(true);
		textPaint.setColor(0xFFFFFF00);
		textPaint.setStyle(Paint.Style.STROKE);
		textPaint.setStrokeJoin(Paint.Join.ROUND);
		textPaint.setStrokeCap(Paint.Cap.ROUND);
		textPaint.setStrokeWidth(3);
		textPaint.setTextSize((float) 50);

		channelTextPaint = new Paint();
		channelTextPaint.setDither(true);
		channelTextPaint.setColor(0x7F0000FF);
		channelTextPaint.setStyle(Paint.Style.STROKE);
		channelTextPaint.setStrokeJoin(Paint.Join.ROUND);
		channelTextPaint.setStrokeCap(Paint.Cap.ROUND);
		channelTextPaint.setStrokeWidth(3);
		channelTextPaint.setTextSize((float) 50);

		// Instantiate the gesture detector with the
		// application context and an implementation of
		// GestureDetector.OnGestureListener
		mDetector = new GestureDetectorCompat(context, this);
		// Set the gesture detector as the double tap
		// listener.
		mDetector.setOnDoubleTapListener(this);
		
		mScaleDetector = new ScaleGestureDetector(context, this);

		setLongClickable(true);

	}

	public DrawingPanel(Context context) {
		super(context);
		getHolder().addCallback(this);
		_thread = new DrawingThread(getHolder(), this);
		xlocation = 0;
		mTextSize = 15;
		mBoundary = 10;
		mGridSize = 50;
		graphscaleX = 1;
		graphscaleY = 1;
		graphshiftx = 0;
		graphshiftyChannel1 = 100;
		graphshiftyChannel2 = 500;

		
		for (int i = 0; i < channel1Points.length; i++) {
			channel1Points[i] = new PointF();
			channel2Points[i] = new PointF();
		}

		mPaint = new Paint();
		mPaint.setDither(true);
		mPaint.setColor(0xFFFFFF00);
		mPaint.setStyle(Paint.Style.STROKE);
		mPaint.setStrokeJoin(Paint.Join.ROUND);
		mPaint.setStrokeCap(Paint.Cap.ROUND);
		mPaint.setStrokeWidth(10);

		nPaint = new Paint();
		nPaint.setDither(true);
		nPaint.setColor(0xFF00FF00);
		nPaint.setStyle(Paint.Style.STROKE);
		nPaint.setStrokeJoin(Paint.Join.ROUND);
		nPaint.setStrokeCap(Paint.Cap.ROUND);
		nPaint.setStrokeWidth(10);

		gridPaint = new Paint();
		gridPaint.setDither(true);
		gridPaint.setColor(0x7FFFFFFF);
		gridPaint.setStyle(Paint.Style.STROKE);
		gridPaint.setStrokeJoin(Paint.Join.ROUND);
		gridPaint.setStrokeCap(Paint.Cap.ROUND);
		gridPaint.setStrokeWidth(1);

		textPaint = new Paint();
		textPaint.setDither(true);
		textPaint.setColor(0x7F0000FF);
		textPaint.setStyle(Paint.Style.STROKE);
		textPaint.setStrokeJoin(Paint.Join.ROUND);
		textPaint.setStrokeCap(Paint.Cap.ROUND);
		textPaint.setStrokeWidth(3);
		textPaint.setTextSize((float) 50);

		channelTextPaint = new Paint();
		channelTextPaint.setDither(true);
		channelTextPaint.setColor(0x7F0000FF);
		channelTextPaint.setStyle(Paint.Style.STROKE);
		channelTextPaint.setStrokeJoin(Paint.Join.ROUND);
		channelTextPaint.setStrokeCap(Paint.Cap.ROUND);
		channelTextPaint.setStrokeWidth(3);
		channelTextPaint.setTextSize((float) 50);

		// Instantiate the gesture detector with the
		// application context and an implementation of
		// GestureDetector.OnGestureListener
		mDetector = new GestureDetectorCompat(context, this);
		// Set the gesture detector as the double tap
		// listener.
		mDetector.setOnDoubleTapListener(this);
		
		mScaleDetector = new ScaleGestureDetector(context, this);

		setLongClickable(true);

	}

	
	/** This section is for the overrides for the gesture listener */
	
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		mScaleDetector.onTouchEvent(event);
		this.mDetector.onTouchEvent(event);
		// Be sure to call the superclass implementation
		return super.onTouchEvent(event);
	}

	@Override
	public boolean onDown(MotionEvent event) {
		Log.d(DEBUG_TAG, "onDown: " + event.toString());
		return true;
	}

	@Override
	public boolean onFling(MotionEvent event1, MotionEvent event2,
			float velocityX, float velocityY) {
		Log.d(DEBUG_TAG, "onFling: " + event1.toString() + event2.toString());
		return true;
	}

	@Override
	public void onLongPress(MotionEvent event) {
		Log.d(DEBUG_TAG, "onLongPress: " + event.toString());
	}

	@Override
	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
			float distanceY) {
		Log.d(DEBUG_TAG, "onScroll: " + e1.toString() + e2.toString());
		graphshiftx = -distanceX + graphshiftx;
		graphshiftyChannel1 = -distanceY + graphshiftyChannel1;
		return true;
	}

	@Override
	public void onShowPress(MotionEvent event) {
		Log.d(DEBUG_TAG, "onShowPress: " + event.toString());
	}

	@Override
	public boolean onSingleTapUp(MotionEvent event) {
		Log.d(DEBUG_TAG, "onSingleTapUp: " + event.toString());
		if (displayUpdating)
			displayUpdating = false;
		else
			displayUpdating = true;
		return true;
	}

	@Override
	public boolean onDoubleTap(MotionEvent event) {
		Log.d(DEBUG_TAG, "onDoubleTap: " + event.toString());
		return true;
	}

	@Override
	public boolean onDoubleTapEvent(MotionEvent event) {
		Log.d(DEBUG_TAG, "onDoubleTapEvent: " + event.toString());
		return true;
	}

	@Override
	public boolean onSingleTapConfirmed(MotionEvent event) {
		Log.d(DEBUG_TAG, "onSingleTapConfirmed: " + event.toString());
		return true;
	}
	
	
	/** This section is for the overrides for the SurfaceView */
	
	@Override
	public void onDraw(Canvas canvas) {
		int i = 0;
		int j = 0;
		x_dim = this.getWidth();
		y_dim = this.getHeight();
		textPaint.setTextSize((float) (y_dim / mTextSize));
		channelTextPaint.setTextSize((float) (y_dim / mTextSize));

		canvas.drawColor(Color.BLACK);
		j = (x_dim % mGridSize) / 2;
		for (i = (y_dim % mGridSize) / 2; i < y_dim; i = i + mGridSize) {
			canvas.drawLine((float) j, (float) i, (float) (x_dim - j),
					(float) i, gridPaint);
		}
		i = (y_dim % mGridSize) / 2;
		for (j = (x_dim % mGridSize) / 2; j < x_dim; j = j + mGridSize) {
			canvas.drawLine((float) j, (float) i, (float) (j),
					(float) (y_dim - i), gridPaint);
		}
	

			for (i = 0; i < 1200; i++) {
				channel1Points[i]
						.set((float) i, (float) ((100) * (Math
								.sin(((i + xlocation) * (.02))))));
				channel2Points[i].set((float) i,
						(float) ((50) * (Math.sin(((i) * (.02))))));
			}

			if (channel1Active) {
				for (i = 0; i < (x_dim - 1); i++) {
					canvas.drawLine(channel1Points[i].x * graphscaleX
							+ graphshiftx, channel1Points[i].y * graphscaleY + graphshiftyChannel1,
							channel1Points[i + 1].x * graphscaleX + graphshiftx,
							channel1Points[i + 1].y * graphscaleY + graphshiftyChannel1, mPaint);
				}
				channelTextPaint.setTextAlign(Paint.Align.RIGHT);
				channelTextPaint.setColor(0x7FFFFF00);
				canvas.drawText("CH1", (float) (x_dim - mBoundary), (float) 80,
						channelTextPaint);
			}

			if (channel2Active) {
				for (i = 0; i < x_dim - 1; i++) {
					canvas.drawLine(channel2Points[i].x * graphscaleX
							+ graphshiftx, channel2Points[i].y + graphshiftyChannel2,
							channel2Points[i + 1].x * graphscaleX + graphshiftx,
							channel2Points[i + 1].y + graphshiftyChannel2, nPaint);
				}
				channelTextPaint.setTextAlign(Paint.Align.RIGHT);
				channelTextPaint.setColor(0x7F00FF00);
				canvas.drawText("CH2", (float) (x_dim - mBoundary),
						(float) 120, channelTextPaint);
			}
			if (displayUpdating) {
			xlocation = (xlocation + 20) % 1200;// Makes the waves move

			canvas.drawText(
					String.valueOf(x_dim).concat(" x ")
							.concat(String.valueOf(y_dim)), (float) mBoundary,
					(float) y_dim - mBoundary, textPaint);
		}

	}

	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {
		// TODO Auto-generated method stub

	}

	public void surfaceCreated(SurfaceHolder holder) {
		// TODO Auto-generated method stub
		_thread.setRunning(true);
		_thread.start();
	}

	public void surfaceDestroyed(SurfaceHolder holder) {
		// TODO Auto-generated method stub
		boolean retry = true;
		_thread.setRunning(false);
		while (retry) {
			try {
				_thread.join();
				retry = false;
			} catch (InterruptedException e) {
				// we will try it again and again...
			}
		}
	}

	
	
	/** This section is for the getter and setters */
	
	public void setGraphScaleY(float scale) {
		graphscaleY= scale;
	}
	
	public void setGraphScaleX(float scale) {
		graphscaleX= scale;
	}

	public void setGraphShiftChannel1(float x, float y) {
		graphshiftx = x;
		graphshiftyChannel1 = y;
	}

	public void setGraphShiftChannel2(float x, float y) {
		graphshiftx = x;
		graphshiftyChannel2 = y;
	}
	
	public DrawingThread getThread() {
		return _thread;
	}

	public void setChannel1(boolean mode) {
		channel1Active = mode;
	}

	public boolean getChannel1() {
		return channel1Active;
	}

	public boolean getChannel2() {
		return channel2Active;
	}

	public void setChannel2(boolean mode) {
		channel2Active = mode;
	}

	
	/** This section is for the overrides for the ScaleListener */
	
	@Override
	public boolean onScale(ScaleGestureDetector detector) {
		// TODO Auto-generated method stub
		Log.d("Scaling", "Scaling: " + graphscaleY);
		if (detector.getCurrentSpanX()*2 < detector.getCurrentSpanY()) // Y bigger than X
			graphscaleY *= detector.getScaleFactor();
		else if (detector.getCurrentSpanY()*2 < detector.getCurrentSpanX()) // X bigger than Y
			graphscaleX *= detector.getScaleFactor();
		else {
			graphscaleY *= detector.getScaleFactor();
			graphscaleX *= detector.getScaleFactor();
		}
        
        // Don't let the object get too small or too large.
		graphscaleY = Math.max(0.1f, Math.min(graphscaleY, 5.0f));
		graphscaleX = Math.max(0.1f, Math.min(graphscaleX, 5.0f));

		return true;
	}

	@Override
	public boolean onScaleBegin(ScaleGestureDetector detector) {
		// TODO Auto-generated method stub
		Log.d("Scaling", "Beginning Scale: " + graphscaleY);
		
		return true;
	}

	@Override
	public void onScaleEnd(ScaleGestureDetector detector) {
		// TODO Auto-generated method stub
		Log.d("Scaling", "Ending Scale: " + graphscaleY);
		
	}
}